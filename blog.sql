/*
Navicat MySQL Data Transfer

Source Server         : localhost_3306
Source Server Version : 50550
Source Host           : localhost:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 50550
File Encoding         : 65001

Date: 2017-06-27 17:39:27
*/

SET FOREIGN_KEY_CHECKS=0;
-- ----------------------------
-- Table structure for `blog_admin`
-- ----------------------------
DROP TABLE IF EXISTS `blog_admin`;
CREATE TABLE `blog_admin` (
  `admin_id` int(11) NOT NULL AUTO_INCREMENT,
  `admin_username` varchar(50) NOT NULL DEFAULT '''''',
  `admin_password` char(32) NOT NULL DEFAULT '''''',
  PRIMARY KEY (`admin_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_admin
-- ----------------------------
INSERT INTO `blog_admin` VALUES ('1', 'admin', 'admin');
INSERT INTO `blog_admin` VALUES ('2', 'zhang', '21232f297a57a5a743894a0e4a801fc3');

-- ----------------------------
-- Table structure for `blog_arc_tag`
-- ----------------------------
DROP TABLE IF EXISTS `blog_arc_tag`;
CREATE TABLE `blog_arc_tag` (
  `arc_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_arc_tag
-- ----------------------------
INSERT INTO `blog_arc_tag` VALUES ('9', '4');
INSERT INTO `blog_arc_tag` VALUES ('9', '6');
INSERT INTO `blog_arc_tag` VALUES ('9', '8');
INSERT INTO `blog_arc_tag` VALUES ('11', '4');
INSERT INTO `blog_arc_tag` VALUES ('12', '8');
INSERT INTO `blog_arc_tag` VALUES ('22', '4');
INSERT INTO `blog_arc_tag` VALUES ('23', '9');
INSERT INTO `blog_arc_tag` VALUES ('24', '6');
INSERT INTO `blog_arc_tag` VALUES ('24', '13');
INSERT INTO `blog_arc_tag` VALUES ('25', '9');
INSERT INTO `blog_arc_tag` VALUES ('26', '5');
INSERT INTO `blog_arc_tag` VALUES ('26', '12');
INSERT INTO `blog_arc_tag` VALUES ('26', '14');
INSERT INTO `blog_arc_tag` VALUES ('27', '13');
INSERT INTO `blog_arc_tag` VALUES ('27', '15');
INSERT INTO `blog_arc_tag` VALUES ('28', '5');
INSERT INTO `blog_arc_tag` VALUES ('28', '9');
INSERT INTO `blog_arc_tag` VALUES ('29', '9');
INSERT INTO `blog_arc_tag` VALUES ('30', '9');

-- ----------------------------
-- Table structure for `blog_article`
-- ----------------------------
DROP TABLE IF EXISTS `blog_article`;
CREATE TABLE `blog_article` (
  `arc_id` int(11) NOT NULL AUTO_INCREMENT,
  `arc_title` varchar(20) NOT NULL,
  `arc_digest` varchar(100) DEFAULT NULL,
  `arc_content` text NOT NULL,
  `sendtime` int(10) NOT NULL,
  `updatetime` int(10) NOT NULL,
  `arc_clicks` int(11) NOT NULL DEFAULT '0',
  `is_recycle` tinyint(4) NOT NULL DEFAULT '0',
  `pic` varchar(100) DEFAULT NULL,
  `cate_id` int(11) NOT NULL,
  `admin_id` int(11) NOT NULL DEFAULT '1',
  `arc_sort` int(11) DEFAULT '10',
  PRIMARY KEY (`arc_id`),
  KEY `cate_id` (`cate_id`),
  KEY `admin_id` (`admin_id`),
  CONSTRAINT `admin_id` FOREIGN KEY (`admin_id`) REFERENCES `blog_admin` (`admin_id`),
  CONSTRAINT `cate_id` FOREIGN KEY (`cate_id`) REFERENCES `blog_cate` (`cate_id`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_article
-- ----------------------------
INSERT INTO `blog_article` VALUES ('9', '前端学习', '打发', '<p>爱迪生多发点</p>', '1498066484', '0', '20', '0', '/static/uploads/20170622/c4968a1a73c04f6caec6e60d693dd6b0.jpg', '3', '1', '33');
INSERT INTO `blog_article` VALUES ('11', 'thinkPHP学习', '阿迪发动', '<p>阿打算发</p>', '1498069406', '0', '8', '0', '/static/uploads/20170622/4e347841785f129f33828d0fe318c580.gif', '3', '1', '12');
INSERT INTO `blog_article` VALUES ('12', 'H5+CSS3', 'AJKDL', '<p>ASDFAF</p>', '1498107370', '0', '7', '0', null, '3', '1', '12');
INSERT INTO `blog_article` VALUES ('22', '测试1', 'dd', '<p>dddd</p>', '1498131804', '1498196230', '11', '1', null, '3', '1', '44');
INSERT INTO `blog_article` VALUES ('23', '修改mysql密码', '使用mysqldump把mysql数据库的数据导出到文件中', '<p><span style=\"color: rgb(51, 51, 51); font-family: &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; widows: 1; background-color: rgb(255, 255, 255);\">正常情况下用php的mysql_query函数是不能批量执行多句CREATE TABLE之类的语句的；而有些场景；比如说有一个sql备份文件、又或是程序初始化时创建数据表结构的时候需要批量执行文件中的sql语句；解决这个问题可以用explode函数按&#39;;&#39;号把sql语句拆成数组；再通过循环执行mysql_query即可；因为每句sql都是以&#39;;&#39;号结束的；</span></p>', '1498225520', '0', '16', '0', '/static/uploads/20170623/ca90e5cd9d1139b1b6b0e4ceb36b7979.jpg', '3', '1', '34');
INSERT INTO `blog_article` VALUES ('24', 'JS日期差价', 'js日期插件', '<pre class=\"brush:html;toolbar:false;\">&lt;!DOCTYPE&nbsp;html&gt;&lt;html&gt;&lt;head&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;data_demo&lt;/title&gt;&lt;!--&nbsp;引入laydate插件开始&nbsp;--&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;src=&quot;http://baijunyao.com/Demo/date_demo/laydate-v1.1/laydate.js&quot;&gt;&lt;/script&gt;&lt;!--&nbsp;引入laydate插件结束&nbsp;--&gt;&lt;/head&gt;&lt;body&gt;&lt;!--&nbsp;基础日期调用开始&nbsp;--&gt;基础调用开始：&lt;input&nbsp;onclick=&quot;laydate()&quot;&gt;&lt;!--&nbsp;基础日期调用结束&nbsp;--&gt;&lt;br&gt;&lt;br&gt;&lt;!--&nbsp;带时间时分秒调用开始&nbsp;--&gt;带时间时分秒调用：&lt;input&nbsp;onclick=&quot;laydate({istime:&nbsp;true,&nbsp;format:&nbsp;&#39;YYYY-MM-DD&nbsp;hh:mm:ss&#39;})&quot;&gt;&lt;!--&nbsp;带时间时分秒调用结束&nbsp;--&gt;&lt;br&gt;&lt;br&gt;&lt;!--&nbsp;带时间、带图标调用开始&nbsp;--&gt;带时间、带图标调用：&lt;input&nbsp;onclick=&quot;laydate({istime:&nbsp;true,&nbsp;format:&nbsp;&#39;YYYY-MM-DD&nbsp;hh:mm:ss&#39;})&quot;&gt;&lt;!--&nbsp;带时间、带图标调用结束&nbsp;--&gt;&lt;br&gt;&lt;br&gt;&lt;!--&nbsp;外部js简单调用开始&nbsp;--&gt;外部js简单调用：&lt;input&nbsp;id=&quot;hello&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;laydate({\r\n&nbsp;&nbsp;&nbsp;&nbsp;elem:&nbsp;&#39;#hello&#39;,&nbsp;//需显示日期的元素选择器\r\n&nbsp;&nbsp;&nbsp;&nbsp;event:&nbsp;&#39;focus&#39;&nbsp;//响应事件。如果没有传入event，则按照默认的click});&lt;/script&gt;&lt;!--&nbsp;外部js简单调用结束&nbsp;--&gt;&lt;br&gt;&lt;br&gt;&lt;!--&nbsp;外部js设置具体参数调用开始&nbsp;--&gt;外部js设置具体参数调用：&lt;input&nbsp;id=&quot;test&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;/*方法属性开始*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;laydate.skin(&#39;molv&#39;);&nbsp;//&nbsp;设置皮肤&nbsp;官方默认可以调用的皮肤有&#39;default&#39;、&#39;dahong&#39;、&#39;molv&#39;&nbsp;此版本已集成了&#39;default&#39;、&#39;dahong&#39;、&#39;molv&#39;、&#39;danlan&#39;、&#39;yalan&#39;、&#39;qianhuang&#39;、&#39;yahui&#39;、&#39;huanglv&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;tody=laydate.now(&#39;-2&#39;);&nbsp;//&nbsp;laydate.now(timestamp,&nbsp;format);&nbsp;timestamp可以是前后若干天，也可以是一个时间戳。format为日期格式，为空时则采用默认的“-”分割。如laydate.now(-2)将返回前天，laydate.now(3999634079890)将返回2096-09-28/*方法属性结束*//*参数设置开始*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;laydate({\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elem:&nbsp;&#39;#test&#39;,&nbsp;//需显示日期的元素选择器\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event:&nbsp;&#39;mouseover&#39;,&nbsp;//触发事件&nbsp;可以调用的事件&#39;click&#39;、&#39;focus&#39;、&#39;mouseover&#39;、&#39;mouseout&#39;等\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format:&nbsp;&#39;YYYY/MM/DD&nbsp;hh:mm:ss&#39;,&nbsp;//日期格式\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;istime:&nbsp;false,&nbsp;//是否开启时间选择\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isclear:&nbsp;true,&nbsp;//是否显示清空\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;istoday:&nbsp;true,&nbsp;//是否显示今天\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;issure:&nbsp;true,&nbsp;//是否显示确认\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;festival:&nbsp;true,&nbsp;//是否显示节日\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min:&nbsp;&#39;2015-03-01&nbsp;00:00:00&#39;,&nbsp;//最小日期\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max:&nbsp;&#39;2015-04-01&nbsp;23:59:59&#39;,&nbsp;//最大日期\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start:&nbsp;laydate.now(),&nbsp;&nbsp;&nbsp;&nbsp;//开始日期&nbsp;例如：&#39;2015-04-01&nbsp;23:59:59&#39;&nbsp;此处是先用laydate.now(&#39;-1&#39;)获得了昨天的时间\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fixed:&nbsp;false,&nbsp;//是否固定在可视区域\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zIndex:&nbsp;99999999,&nbsp;//css&nbsp;z-index\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;choose:&nbsp;function(dates){&nbsp;//选择好日期后的回调\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(tody);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;})/*参数设置结束*/&lt;/script&gt;&lt;!--&nbsp;外部js设置具体参数调用结束&nbsp;--&gt;&lt;/body&gt;&lt;/html&gt;</pre><p><br/></p>', '1498225728', '0', '5', '0', null, '3', '1', '12');
INSERT INTO `blog_article` VALUES ('25', '今日新闻', '新闻栏目测试', '<p>新闻栏目测试新闻栏目测试新闻栏目测试新闻栏目测试</p>', '1498280858', '0', '12', '0', '/static/uploads/20170624/d774f5f4d64cfcb8a03fe2a05192ef8e.jpg', '10', '1', '25');
INSERT INTO `blog_article` VALUES ('26', 'SSH整合', 'Spring，hibernate，struts整合', '<p><br/></p><p><br/></p><p>Struts2整合Spring</p><p>Spring整合hibernate</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>web层 &nbsp;<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>---&gt;<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>业务层<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>---&gt;<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>持久层<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>--&gt;DB</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>Struts2<span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>Spring<span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>hibernate<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p>1.引入jar包</p><p><br/></p><p>2.框架配置文件</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>1）Struts2框架配置文件</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>web.xml &nbsp; struts.xml</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>web.xml中配置：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;!--struts2核心过滤器的配置--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;filter&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;filter-name&gt;struts&lt;/filter-name&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrtusPrepareAndExecuteFilter&lt;/filter-class&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;/filter&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;filter-mapping&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;filter-name&gt;struts&lt;/filter-name&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;/filter-mapping&gt;<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>struts.xml中配置：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>在src目录下引入struts.xml</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>2)hibernate框架配置文件</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>hibernate.cfg.xml &nbsp;//在ssh整合中可以省略</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>映射文件</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>3）Spring框架配置文件</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>web.xml</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>applicationContext.xml(只留下框架)</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>web.xml配置：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;!--核心监听器配置--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;listener&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;/listener&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;context-param&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;/context-param&gt;</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>applicationContext.xml配置：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>在src目录下引入applicationContext.xml和log4j.properties</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p>3.创建实体类</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>public class Product{</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>private String pid;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>private Stirng pname;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>private String prices;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>get和set....</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p><br/></p><p><br/></p><p>4.创建页面</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>product.jsp:</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;%@ taglib uri=&quot;/struts-tags&quot; prefix=&quot;s&quot; %&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>....</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;s:form action=&quot;prodcut_save&quot; method=&quot;post&quot; namespace=&quot;/&quot; theme=&quot;simple&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;table&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;tr&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;td&gt;商品名称&lt;/td&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;td&gt;&lt;s:textfield name=&quot;pname&quot; /&gt;&lt;/td&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;/tr&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;tr&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;td&gt;商品价格&lt;/td&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;td&gt;&lt;s:textfield name=&quot;price&quot; /&gt;&lt;/td&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;/tr&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;tr&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;添加&quot;/&gt;&lt;/td&gt;\\</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;/tr&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;/table&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;/s:form&gt;</p><p><br/></p><p>5.编写Action 、Service 和DAO</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>/*商品管理的Action类*/</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>public class ProductAction extends ActionSupport implements ModelDriven&lt;Product&gt;{</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>//模型驱动使用的类</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>private Product=new Product();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>@Override</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>public Product getModel(){</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>return product;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>//struts和Spring整合过程中按名称自动注入的业务层类</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>private ProductService productService;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>//注入Service</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>public void setProductService(ProductService productService){</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>this.productService=productService;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>//保存商品的执行的方法</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>publci String save(){</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>System.out.println(&quot;Action中的save方法执行了...&quot;);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>//调用Service</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>productService.save(product);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>return NONE; &nbsp;//不进行页面跳转</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>/*商品管理的Service类*/</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>public class ProductService{</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>//业务层注入Dao的类</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>private ProductDao productDao;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>public void setProductDao(ProductDao productDao){</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>this.productDao=productDao;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>//业务层保存商品的方法</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>public void save(Product product){</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>System.out.println(&quot;Service中的save方法执行了..&quot;);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>//调用Dao中的save方法</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>productDao.save(product);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>/*商品管理的Dao类*/</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>public class ProductDao{</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>//Dao中保存商品的方法</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>public void save(Product product){</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>System.out.println(&quot;Dao中的save方法执行了..&quot;);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>}<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p>6.配置Action 、Service和DAO类</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>&lt;!--配置业务层(Service)的类--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>在applicationContext.xml中：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;bean id=&quot;productService&quot; class=&quot;....service.ProductService&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;!--注入DAO--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;property name=&quot;productDao&quot; ref=&quot;productDao&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;/bean&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>&lt;!--配置DAO类--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;bean id=&quot;productDao&quot; class=&quot;...dao.ProductDao&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;/bean&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>Struts2和Spring整合的两种方式：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>1）Action的类有Struts自身去创建、</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>在struts.xml中：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;package name=&quot;ssh&quot; extends=&quot;struts-default&quot; namespace=&quot;/&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;action name=&quot;product_*&quot; class=&quot;cn.muke.ssh.action.ProductAction&quot; method=&quot;{1}&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;/action&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;/package&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>2）Action的类交给Spring框架创建(推荐使用)</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>在applicationContext.xml中,</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;!--配置Action类--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;bean id=&quot;productAction class=&quot;....action.ProductAction&quot; scope=&quot;prototype&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;!--手动注入Service--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;property name=&quot;productService&quot; ref=&quot;productService&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;/bean&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>还要在struts.xml中配置：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>在struts.xml中：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;package name=&quot;ssh&quot; extends=&quot;struts-default&quot; namespace=&quot;/&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;!--下面的class为applicationContext.xml中的bean id名--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;action name=&quot;product_*&quot; class=&quot;productAction&quot; method=&quot;{1}&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;/action&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;/package&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p>7.创建数据库</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p>8.创建映射文件</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>在实体包下创建(**为实体类名)**.hbm.xml文件：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>在hibernatejar包下找到hibernate-mapping-3.0.dtd，复制它的头信息</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;!DOCTYPE hibernate/Hibernate Mapping DTD 3.0//EN&quot;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;!--数据库映射文件--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;hibernate-mapping&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;class name=&quot;....domain.Product&quot; table=&quot;product&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;id name=&quot;pid&quot; column=&quot;pid&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;generator class=&quot;native&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;/id&gt;</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;property name=&quot;pname&quot; column=&quot;pname&quot; length=&quot;20&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;property name=&quot;price&quot; column=&quot;price&quot; /&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;/class&gt;<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;/hibernate-mapping&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p>9.Spring整合hibernate：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>在src下创建一个jdbc.properties属性文件，把连接数据库的一些参数配置在属性文件中</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>jdbc.driverClass=&quot;com.mysql.jdbc.Driver</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>jdbc.url=jdbc:mysql://localhost:3306/ssh</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>jdbc.username=root</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>jdbc.password=123</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>在Spring配置文件applicationContext.xml中引入属性文件：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;!--引入外部属性文件--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;!--配置c3p0连接池--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;property name=&quot;driverClass&quot; value=&quot;${jdbc.driverClass}&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;property name=&quot;jdbcUrl&quot; value=&quot;${jdbc.url}&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;property name=&quot;user&quot; value=&quot;${jdbc.username}&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;/bean&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;!--配置Hibernate相关属性--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate3.LocalSessionFactoryBean&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;!--注入连接池--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;!--配置Hibernate的属性--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;property name=&quot;hibernateProperties&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">							</span>&lt;props&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">								</span>&lt;prop key=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&quot;&lt;/prop&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">								</span>&lt;prop key=&quot;hibernate.show_sql&quot;&gt;true&lt;/prop&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">								</span>&lt;prop key=&quot;hibernate.format_sql&gt;true&lt;/prop&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">								</span>&lt;prop key=&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;/prop&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">							</span>&lt;/props&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;/property&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;!--加载Hibernate中的映射文件--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;property name=&quot;mappingResources&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">							</span>&lt;list&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">								</span>&lt;value&gt;cn/muke/ssh/domain/Product.hbm.xml&lt;/value&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">							</span>&lt;/list&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>&lt;/property&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>&lt;/bean&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span></p><p>10.编写DAO中的代码</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>在DAO配置中注入sessionFactory属性：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;!--配置DAO类--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;bean id=&quot;productDao&quot; class=&quot;cn.muke.ssh.dao.ProductDao&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;/bean&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>在Dao的类上继承HibernateDaoSupport类：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>public claaa ProductDao extends HibernateDaoSupport{</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>public void save(Product product){</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>System.out.println(&quot;DAO中的save方法执行了...&quot;);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>//在DAO中调用模板完成保存操作</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>this.getHibernateTemplate().save(product);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><br/></p><p>11.事务管理</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>在applicationContext.xml中配置：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;!--配置事务管理器--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;/bean&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;!--开启注解事务--&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>在业务层类上添加上注解：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>@Transactional</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>public class ProductService{</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>.......</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space: pre;\">		</span></p><p><br/></p>', '1498406837', '0', '2', '0', null, '3', '1', '14');
INSERT INTO `blog_article` VALUES ('27', 'Ajax入门', 'Ajax的基本使用', '<p>什么是Ajax?</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>Ajax被认为是Asynchronous JavaScript and XML的缩写。现在允许浏览器与服务器通信而无需刷新当前页面的技术都被叫做Ajax。</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>不用刷新整个页面便可与服务器通讯的办法：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>--Flash</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>--java applet</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>--框架：如果使用一组框架构造了一个网页，可以只更新其中一个框架，而不必惊动整个页面</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>--隐藏的frame</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>--XMLHttpRequest:该对象是对JavaScript的一个扩展，可使网页与服务器进行通信。是创建Ajax应用的最佳选择。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>实际上通常把Ajax当成XMLHttpRequest对象的代名词。</p><p><br/></p><p><br/></p><p>Ajax工具包：</p><p>Ajax并不是一项新技术，它实际上是几种技术，每种技术各尽其职，以一种全新的方式聚合在一起。</p><p>--服务器端语言：服务器需要具备向浏览器发送待定信息的能力。Ajax与服务器端语言无关。</p><p>--XML是一种描述数据的格式。Ajax程序需要某种格式化的格式来在服务器和客户端之间传递信息，XML是其中一种。</p><p>--XHTML，使用扩展超媒体标记语言和CSS标准化呈现；</p><p>--DOM，实现动态显示和交互</p><p>--使用XMLHTTP组件XMLHttpRequest对象进行异步数据读取</p><p>--使用JavaScript绑定和处理所有数据。</p><p><br/></p><p>Ajax的缺陷：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>-由JavaScript和Ajax引擎导致的浏览器的兼容</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>--页面局部刷新，导致后退等功能的失效</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>--对流媒体的支持没有Flah、javascript、java applet好</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>--一些手持设备支持性差</p><p><br/></p><p><br/></p><p><br/></p><p>创建XMLHttpRequest对象：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>为了每次写Ajax时节省一点时间，可以把对象检测的内容打包成一个可服用的函数，</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>function getHTTPObject(){</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>var xhr=false;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>if(window.XMLHttpRequest){</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>xhr=new XMLHttpRequest();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>}else if(window.ActivityXObject){</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>xhr=new ActivityXObject(&quot;Microsoft.XMLHTTP&quot;);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>}<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>return xhr;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>说明：对window.XMLHttpRequest的调用会返回一个对象或null，if语句会把调用返回的结果看作</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;是false或true(如果返回对象则为true，如果返回null则为false)。如果XMLHttpRequest对象</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span> &nbsp; &nbsp;存在，则把xhr的值设为该对象的新实例。如果不存在，就去检测ActiveObject的实例是否存在，</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span> &nbsp; &nbsp;如果存在，则把微软的XMLHTTP的新实例赋给xhr。</p><p><span class=\"Apple-tab-span\" style=\"white-space: pre;\">		</span></p><p><br/></p>', '1498406936', '0', '57', '0', null, '10', '1', '56');
INSERT INTO `blog_article` VALUES ('28', 'JPA简介', 'JPA的使用和Spring', '<p>JPA是什么?</p><p>java Persistence API:用于对象持久化的API</p><p><br/></p><p>JPA和Hibernate 的关系：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>JPA是hibernate的一个抽象（就像JDBC和JDBC驱动的关系）</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>--JPA是规范：JPA本质上就是一种ORM规范，不是ORM框架。因为JPA并未提供ORM实现，他只是制定了一些规范，</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>提供了一些编程的API接口，但具体实现则由ORM厂商提供实现</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>--Hibernate是实现：Hibernate除了作为ORM框架之外，他也是一种JPA实现</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>从功能上说，JPA是Hibernate功能的一个子集。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>JPA优势：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>标准化：提供相同的API，这保证了基于JPA开发的企业应用能够经过少量的修改就能够在不同的JPA框架下运行</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>简单易用，集成方便：提供更加简单的编程模型，在JPA框架下创建实体和创建java类一样简单，只需使用javax.persistence.Entity进行注释</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>可媲美JDBC的查询能力：JAP定义了独特的JPQL，而且能够支持批量更新和修改、JOIN、GROUP BY、HAVING等通常只有SQL才能提供的高级查询特性，甚至还能支持子查询。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>支持面向对象的高级特性：类之间的继承，多态和类之间的复杂关系，最大限度地使用面向对象的模型</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>JPA包括3方面技术：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>ORM映射元数据：JPA支持xml和jdk5.0注解两种元数据形式，元数据描述对象和表之间的映射关系，框架据此将实体对象持久化到数据库表中。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>JPA的API：用来操作实体对象，执行CRUD操作，框架在后台完成所有事情，开发者从繁琐的JDBC和SQL代码中解脱出来。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>查询语言（JPQL):这是持久化操作中很重要的一个方面，通过面向对象而非面向数据库的查询语言查询数据，避免程序和具体的SQL紧密耦合。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p>使用JPA持久化对象的步骤：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>1.创建persistence.xml，在这个文件中配置持久化单元</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>--需要指定跟哪个数据库进行交互</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>--需指定JPA使用哪个持久化的框架以及配置该框架的基本属性</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>2.创建实体类，使用annotation(注解)来描述实体类跟数据库表之间的映射关系。</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>3.使用JPA API完成数据增加、删除、修改和查询操作</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>--创建EntityManagerFactory（对应Hibernate中的SessionFaction）</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>--创建EntityManager(对应Hibernate中的Session)</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>注：JPA规范要求在类路径的META-INF目录下放置persistence.xml，文件名称是固定的。<span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>例：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>配置文件persistence.xml：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</p><p>&lt;persistence version=&quot;2.0&quot; xmlns=&quot;http://java.sun.com/xml/ns/persistence&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>&lt;persistence-unit name=&quot;jpa-1&quot; transaction-type=&quot;RESOURCE_LOCAL&quot;&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>&lt;!--&nbsp;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>配置使用什么ORM产品来作为JPA的实现</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>1.实际上是配置javax.persistence.spi.persistenceProvider接口实现类</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>2.若JPA项目中只有一个JPA实现产品，则也可以不配置该节点</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span> --&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;!-- 添加持久化类 --&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;class&gt;com.edu.zhku.Customer&lt;/class&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;properties&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;!-- 连接数据库基本信息 --&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;property name=&quot;javax.persistence.jdbc.driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;property name=&quot;javax.persistence.jdbc.url&quot; value=&quot;jdbc:mysql://jpa&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;property name=&quot;javax.persistence.jdbc.user&quot; value=&quot;root&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;!-- 配置JPA实现产品的基本属性，配置 hibernate的基本属性 --&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;property name=&quot;hibernate.show_sql&quot; value=&quot;true&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>&lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;update&quot;/&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>&lt;/properties&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>&lt;/persistence-unit&gt;</p><p>&lt;/persistence&gt;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>实体类：Customer.java:</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>package com.edu.zhku;</p><p><br/></p><p>import javax.persistence.Column;</p><p>import javax.persistence.Entity;</p><p>import javax.persistence.GeneratedValue;</p><p>import javax.persistence.GenerationType;</p><p>import javax.persistence.Id;</p><p>import javax.persistence.Table;</p><p>@Table(name=&quot;JPA_CUSTOMERS&quot;)</p><p>@Entity()</p><p>public class Customer {</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>private Integer id;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>private String lastName;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>private String emial;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>private int age;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>@Column(name=&quot;ID&quot;)</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>@GeneratedValue(strategy=GenerationType.AUTO)</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>@Id</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>public Integer getId() {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>return id;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>public void setId(Integer id) {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>this.id = id;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>@Column(name=&quot;LAST_NAME&quot;)</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>public String getLastName() {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>return lastName;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>public void setLastName(String lastName) {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>this.lastName = lastName;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>public String getEmial() {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>return emial;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>public void setEmial(String emial) {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>this.emial = emial;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>public int getAge() {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>return age;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>public void setAge(int age) {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>this.age = age;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p>}</p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>主类：Main.java:</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>package com.edu.zhku;</p><p><br/></p><p>import javax.persistence.EntityManager;</p><p>import javax.persistence.EntityManagerFactory;</p><p>import javax.persistence.EntityTransaction;</p><p>import javax.persistence.Persistence;</p><p><br/></p><p>public class Main {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>public static void main(String[] args) {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//1.创建EntityManagerFactory</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>String persistenceUnitName=&quot;jpa-1&quot;;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>EntityManagerFactory entityManagerFactory=</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>Persistence.createEntityManagerFactory(persistenceUnitName);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//2.创建EntityManager</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>EntityManager entityManager=entityManagerFactory.createEntityManager();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//3.开启事务</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>EntityTransaction transaction=entityManager.getTransaction();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>transaction.begin();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//4.进行持久化操作</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>Customer customer=new Customer();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>customer.setAge(15);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>customer.setEmial(&quot;zhang@qq.com&quot;);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>customer.setLastName(&quot;zhang&quot;);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>entityManager.persist(customer);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//5.提交事务</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>transaction.commit();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//6.关闭EntityManager</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>entityManager.close();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>//7.关闭EntityManagerFactory</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>entityManagerFactory.close();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p>}</p><p><br/></p><p><br/></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p>JPA基本注解：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>@Entity 标注用于实体类声明语句之间，指出该java类为实体类，将映射到指定的数据库表。如声明一个Customer实体类，它将映射到数据库中的customer表上。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>@Table 当实体类与其映射的数据库表名不同时需要使用@Table标注说明，该标注与@Table标注并列使用，置于实体类声明语句之前。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>@Table常用的选项是name，用于指明数据库表名</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>@Table还有两个选项catalog和schema用于设置表所属的数据库目录或模式，通常为数据库名。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>uniqueConstraints选项用于设置约束条件，通常不需要设置</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>@Id 标注用于声明一个实体类的属性映射为数据库的主键列，该属性通常设置于声明再语句之前，也可设置于getter方法之前。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>@GeneratedValue 用于标注主键的生成策略，通过strategy属性指定。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>默认情况下JPA自动选择一个最适合底层数据库的主键生成策略：SqlServer对应identity，MySql对应auto increment。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">					</span>在javax.persistence.GenerationType中定义了一下集中可供选择的策略：</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>--IDENTITY:采用数据库ID自增长的方式来自增主键字段，Oracle不支持这种方式</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>--AUTO: JPA自动选择合适的策略，是默认选项</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>--SEQUENCE:通过序列产生主键，通过@SequenceGenerator注解指定序列名，Mysql不支持这种方式。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span>--TABLE：通过表产生主键，框架值由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">						</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>@Basic 表示一个简单的属性到数据库表的字段的映射，对于没有任何标注的getXxxx()方法，默认即为@Basic<span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>fetch:表示该属性的读取策略，有EAGER和LAZY两种，分别表示主支抓取和延迟加载，默认为true。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>option：表示该属性是否允许为null，默认为true。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>@Column 当实体属性与其映射的数据表的列不同名时需要使用，该标注通常设置于属性的声明预计之前，也可置于getter方法之前。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>常用属性是name，用于设置映射数据库表的列名，此外还有其它属性，如unique、nullable、length等。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>columnDefinition属性表示字段在数据库中的实际类型。通常ORM框架可以根据属性类型自动判断数据库中字段</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>的类型，但是对于Date类型仍无法确定数据库中字段类型究竟是DATE、TIME还是TIMESTAMP。此外，String默认映射</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>类型为VARCHAR，可以将String类型映射为BLOB或TEXT字段类型</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>@Transient 表示该属性并非一个到数据库表的字段的映射，ORM框架将忽略该属性</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>如果一个属性并非数据库表的字段映射，就务必将其表示为@Transient,否则ORM框架默认其注解为@Basic。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>@Temporal 在核心java API中并没有定义Date类型的精度（temporal precision），而在数据库中，表示Date类型的</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>数据有DATE、TIME、TIMESTMP三种精度，在进行属性映射时可以使用@Temporal注解来调整精度。</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span></p><p><span class=\"Apple-tab-span\" style=\"white-space: pre;\">		</span></p><p><br/></p>', '1498407014', '0', '17', '0', null, '10', '1', '34');
INSERT INTO `blog_article` VALUES ('29', '苹果AR项目上马', '苹果则将目光瞄向了增强现实（AR）', '<p class=\"text\" style=\"margin-top: 0px; margin-bottom: 28px; padding: 0px; word-wrap: break-word; font-family: &quot;Microsoft Yahei&quot;, Helvetica, sans-serif; line-height: 28px; white-space: normal; widows: 1; text-indent: 2em; background-color: rgb(255, 255, 255);\">近些年来，<a class=\"a-tips-Article-QQ\" href=\"http://stockhtm.finance.qq.com/astock/ggcx/AAPL.OQ.htm\" target=\"_blank\" style=\"text-decoration-line: none; outline: 0px; color: rgb(0, 0, 0); border-bottom: 1px dotted rgb(83, 109, 166);\">苹果</a>的产品发布一直显得比别人慢半拍，不过它们却能神奇的将那些诞生许久却迟迟无法进入主流市场的产品带向成功，指纹认证和NFC支付就是最好的两个例子。这两项技术诞生在日本，但它们出现在iPhone上之前，却一直偏居一隅得不到全世界的认同。</p><p class=\"text\" style=\"margin-top: 0px; margin-bottom: 28px; padding: 0px; word-wrap: break-word; font-family: &quot;Microsoft Yahei&quot;, Helvetica, sans-serif; line-height: 28px; white-space: normal; widows: 1; text-indent: 2em; background-color: rgb(255, 255, 255);\">现在，苹果则将目光瞄向了增强现实（AR），而<a class=\"a-tips-Article-QQ\" href=\"http://stockhtm.finance.qq.com/astock/ggcx/GOOG.OQ.htm\" target=\"_blank\" style=\"text-decoration-line: none; outline: 0px; color: rgb(0, 0, 0); border-bottom: 1px dotted rgb(83, 109, 166);\">谷歌</a>(<a href=\"http://t.qq.com/googlechina#pref=qqcom.keyword\" target=\"_blank\" style=\"text-decoration-line: none; outline: 0px; color: rgb(0, 0, 0); border-bottom: 1px dotted rgb(83, 109, 166);\">微博</a>)和<a class=\"a-tips-Article-QQ\" href=\"http://stockhtm.finance.qq.com/astock/ggcx/MSFT.OQ.htm\" target=\"_blank\" style=\"text-decoration-line: none; outline: 0px; color: rgb(0, 0, 0); border-bottom: 1px dotted rgb(83, 109, 166);\">微软</a>等巨头在该领域已经摸爬滚打多年。虽然苹果已经无法拿下AR发明者的头衔，但WWDC上展示的ARKit却让我们看到了苹果的真正实力，在将AR带向主流的道路上，它们可能比其他厂商都要快上不少。</p><p class=\"text\" style=\"margin-top: 0px; margin-bottom: 28px; padding: 0px; word-wrap: break-word; font-family: &quot;Microsoft Yahei&quot;, Helvetica, sans-serif; line-height: 28px; white-space: normal; widows: 1; text-indent: 2em; background-color: rgb(255, 255, 255);\">AR行业一直存在一个长期问题，那就是这项技术的实用性。其实2009年时，借助Layar这款应用，在普通手机上我们已经能实现基础的AR功能了，但这些功能根本没有说服力。谷歌的Tango project虽然可以实现复杂且吸引力十足的AR功能，但那又大又笨的平板电脑用起来实在太累了。反观苹果，它们把手机的便携性和先进AR功能进行了结合，让人无法抗拒。</p><p class=\"text\" style=\"margin-top: 0px; margin-bottom: 28px; padding: 0px; word-wrap: break-word; font-family: &quot;Microsoft Yahei&quot;, Helvetica, sans-serif; line-height: 28px; white-space: normal; widows: 1; text-indent: 2em; background-color: rgb(255, 255, 255);\">其实在ARKit诞生前，你的手机上就有了许多测距工具，但借助AR技术测量起距离来可以变得更加直观（<a target=\"_blank\" href=\"http://time.qq.com/baike/deskclean/20170207.htm?pgv_ref=guanjianews_tips&from=guanjia\" class=\"nameStar gj-nameStar gj-keyword\" style=\"text-decoration-line: none; outline: 0px; color: rgb(81, 112, 166); border-bottom: 1px dotted rgb(83, 109, 166);\">屏幕</a>里会出现一把全息卷尺）。苹果在AR应用上的最大优势就是简单，你不需要特殊的硬件，手上只要有台iPhone就能实现。在月初的WWDC上，苹果负责人克雷格-费德里吉就将ARKit描述为“世界上最大的AR平台”。事实上，他并没有吹牛。</p><p class=\"text\" style=\"margin-top: 0px; margin-bottom: 28px; padding: 0px; word-wrap: break-word; font-family: &quot;Microsoft Yahei&quot;, Helvetica, sans-serif; line-height: 28px; white-space: normal; widows: 1; text-indent: 2em; background-color: rgb(255, 255, 255);\">今年秋季随iOS 11一同上市后，苹果的AR平台马上就会拥有数千万用户，而且从演示来看，苹果的AR技术可一点也不比谷歌差。有了庞大的用户群，苹果很轻松就能吸引到更多的开发者和投资。可以这么说，谷歌的Tango project着眼于未来，而苹果的ARKit则更关注现在。</p><p class=\"text\" style=\"margin-top: 0px; margin-bottom: 28px; padding: 0px; word-wrap: break-word; font-family: &quot;Microsoft Yahei&quot;, Helvetica, sans-serif; line-height: 28px; white-space: normal; widows: 1; text-indent: 2em; background-color: rgb(255, 255, 255);\">除了用户众多，ARKit的开发便利性也无人能及，网上曝光的几个AR测距应用就是在短时间内完成开发的。因此在9月份iOS 11正式推出时，苹果恐怕已经积累了大量好用的AR应用，而这对AR走向主流至关重要。也许三个月后，你就能借助AR技术在家中逛宜家商店了。</p><p class=\"text\" style=\"margin-top: 0px; margin-bottom: 28px; padding: 0px; word-wrap: break-word; font-family: &quot;Microsoft Yahei&quot;, Helvetica, sans-serif; line-height: 28px; white-space: normal; widows: 1; text-indent: 2em; background-color: rgb(255, 255, 255);\">同时，对于那些早已厌倦了手机硬件和设计军备竞赛的用户来说，AR这项实用性很强的新功能可能会成为iPhone让人动心的新卖点。</p><p><br/></p>', '1498542581', '0', '15', '0', '/static/uploads/20170627/613ef4ef82b3d22ff30e5f9477465d7b.JPG', '11', '1', '89');
INSERT INTO `blog_article` VALUES ('30', '京东、百度市值之争', '京东只需要再涨1%就要超过百度', '<p style=\"margin-top: 0px; margin-bottom: 20px; padding: 0px; word-wrap: break-word; text-align: justify; color: rgb(80, 80, 80); line-height: 27px; font-family: helvetica; font-size: 18px; white-space: normal; widows: 1; background-color: rgb(255, 255, 255);\">6月23日收盘，京东（JD.NASDAQ）股价收涨3.92%，报42.95美元，相比一年前大涨了100%，市值达到609亿美元；而百度（BIDU.NASDAQ）股价收跌0.66%，市值约为615亿美元。两者的市值差距仅剩6亿美元，换算成涨幅也只剩1%。</p><p style=\"margin-top: 0px; margin-bottom: 20px; padding: 0px; word-wrap: break-word; text-align: justify; color: rgb(80, 80, 80); line-height: 27px; font-family: helvetica; font-size: 18px; white-space: normal; widows: 1; background-color: rgb(255, 255, 255);\">这意味着，京东只需要再涨1%就要超过百度的报道开始刷屏，BAT要变成ATJ的言论也愈发热烈。虽然谁都知道，两家公司一家做搜索一家做电商，完全不处于同行业。然而市值代表资本市场对一个公司未来价值的认可，只有投资者认为公司有巨大成长空间，市值才会持续上涨。</p><p style=\"margin-top: 0px; margin-bottom: 20px; padding: 0px; word-wrap: break-word; text-align: justify; color: rgb(80, 80, 80); line-height: 27px; font-family: helvetica; font-size: 18px; white-space: normal; widows: 1; background-color: rgb(255, 255, 255);\">这正如大家习惯拿BAT比较一样，几家的核心业务各不相同，但在中国互联网行业，这三家公司曾经就是爸爸一样的存在，代表着它们在中国互联网行业掌握的巨大流量，也就是影响力。</p><p style=\"margin-top: 0px; margin-bottom: 20px; padding: 0px; word-wrap: break-word; text-align: justify; color: rgb(80, 80, 80); line-height: 27px; font-family: helvetica; font-size: 18px; white-space: normal; widows: 1; background-color: rgb(255, 255, 255);\">BAT这个宝座，曾经在后面跟上过J（京东），也曾经有人认为该去掉B。不可否认的是，从财务数据上，京东和百度的盈利能力，似乎在往相反方向走。</p><p><br/></p>', '1498542749', '0', '4', '0', '/static/uploads/20170627/1b2ee233e1504afe6c2b0283ed1a75af.JPG', '12', '1', '67');

-- ----------------------------
-- Table structure for `blog_cate`
-- ----------------------------
DROP TABLE IF EXISTS `blog_cate`;
CREATE TABLE `blog_cate` (
  `cate_id` int(11) NOT NULL AUTO_INCREMENT,
  `cate_name` varchar(50) NOT NULL,
  `cate_pid` int(11) DEFAULT NULL,
  `cate_sort` int(11) DEFAULT '100',
  PRIMARY KEY (`cate_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_cate
-- ----------------------------
INSERT INTO `blog_cate` VALUES ('3', '文章', '0', '100');
INSERT INTO `blog_cate` VALUES ('10', '新闻', '0', '101');
INSERT INTO `blog_cate` VALUES ('11', '腾讯新闻', '10', '33');
INSERT INTO `blog_cate` VALUES ('12', '今日头条', '10', '22');

-- ----------------------------
-- Table structure for `blog_chat`
-- ----------------------------
DROP TABLE IF EXISTS `blog_chat`;
CREATE TABLE `blog_chat` (
  `chat_id` int(11) NOT NULL AUTO_INCREMENT,
  `chat_name` varchar(20) NOT NULL,
  `chat_time` int(11) NOT NULL,
  `chat_content` varchar(100) NOT NULL,
  `arc_id` int(11) NOT NULL,
  PRIMARY KEY (`chat_id`),
  KEY `arc_id` (`arc_id`),
  CONSTRAINT `arc_id` FOREIGN KEY (`arc_id`) REFERENCES `blog_article` (`arc_id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_chat
-- ----------------------------
INSERT INTO `blog_chat` VALUES ('14', '张三', '1498550258', '年后', '27');
INSERT INTO `blog_chat` VALUES ('15', '李四', '1498551026', '你好', '27');
INSERT INTO `blog_chat` VALUES ('18', '张三丰', '1498551646', '你好', '30');
INSERT INTO `blog_chat` VALUES ('19', 'AAA', '1498555821', '角度考虑设计了', '29');
INSERT INTO `blog_chat` VALUES ('20', 'BBB', '1498555849', 'BBBBBBBBBBBBB', '9');

-- ----------------------------
-- Table structure for `blog_link`
-- ----------------------------
DROP TABLE IF EXISTS `blog_link`;
CREATE TABLE `blog_link` (
  `link_id` int(11) NOT NULL AUTO_INCREMENT,
  `link_name` varchar(20) NOT NULL,
  `link_url` varchar(100) NOT NULL,
  PRIMARY KEY (`link_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_link
-- ----------------------------
INSERT INTO `blog_link` VALUES ('3', '吴文辉博客', 'http://www.wuwenhui.cn/');
INSERT INTO `blog_link` VALUES ('5', '刘望舒的专栏', 'http://blog.csdn.net/itachi85/article/details/73773243');
INSERT INTO `blog_link` VALUES ('6', '仲恺农业工程学院', 'http://www.zhku.edu.cn');

-- ----------------------------
-- Table structure for `blog_note`
-- ----------------------------
DROP TABLE IF EXISTS `blog_note`;
CREATE TABLE `blog_note` (
  `note_id` int(11) NOT NULL AUTO_INCREMENT,
  `note_content` varchar(200) NOT NULL,
  `note_time` int(10) NOT NULL,
  PRIMARY KEY (`note_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_note
-- ----------------------------
INSERT INTO `blog_note` VALUES ('1', '测试', '1498131804');
INSERT INTO `blog_note` VALUES ('2', '测试2', '1498131869');
INSERT INTO `blog_note` VALUES ('3', '测试3', '1498121869');
INSERT INTO `blog_note` VALUES ('4', '今天天气晴朗', '1498406837');
INSERT INTO `blog_note` VALUES ('6', '今天下雨', '1498445837');
INSERT INTO `blog_note` VALUES ('7', 'adadfas', '0');
INSERT INTO `blog_note` VALUES ('8', '快要下雨了', '1498541808');

-- ----------------------------
-- Table structure for `blog_tag`
-- ----------------------------
DROP TABLE IF EXISTS `blog_tag`;
CREATE TABLE `blog_tag` (
  `tag_id` int(11) NOT NULL AUTO_INCREMENT,
  `tag_name` varchar(20) NOT NULL,
  PRIMARY KEY (`tag_id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_tag
-- ----------------------------
INSERT INTO `blog_tag` VALUES ('4', 'PHP');
INSERT INTO `blog_tag` VALUES ('5', 'JAVA');
INSERT INTO `blog_tag` VALUES ('6', 'JS');
INSERT INTO `blog_tag` VALUES ('8', 'HTML');
INSERT INTO `blog_tag` VALUES ('9', '其他');
INSERT INTO `blog_tag` VALUES ('10', 'JQuery');
INSERT INTO `blog_tag` VALUES ('11', 'Android');
INSERT INTO `blog_tag` VALUES ('12', '软件');
INSERT INTO `blog_tag` VALUES ('13', '前端');
INSERT INTO `blog_tag` VALUES ('14', '后台');
INSERT INTO `blog_tag` VALUES ('15', 'Ajax');
INSERT INTO `blog_tag` VALUES ('16', '框架');
